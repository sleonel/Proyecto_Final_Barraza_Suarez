/**
 * Implementation of the L1 Node . 
 * The node turns on the red LED after booting. A timer is started. Every time
 * this timer fires, a packet is sent to L0, and the yellow led is 
 * toggled. 
 * The packet contains TPSN request and the ID of this node and a sequence number. 
 * packet called "Report TPSN message to node 0". This packet contains the information about
 * the TPSN  sequence number and the local time it was received. The report
 * packet is sent to the L0 node  directly, so the BS 
 * should be within 1-hop distance. The green LED toggles every time a 
 * "TPSN Report message" is sent.
 * TPSN request is receive form L2 Node, this save the time stamp, and report a message. whit the time stamp. 
 *  
 * 
 * 
 * 
 * @author luis
 * @modified Apr 4, 2014 
 */

#include <Timer.h>
#include "Tpsn1.h"
#include "Tpsn2.h"
#include "Beacon.h"
#include "TpsnReceiver0.h"

module Tpsn1P {
  uses interface Boot;
  uses interface Leds;
  uses interface SplitControl as AMControl; //Active Message Control
  uses interface Packet;
  uses interface AMSend as AMSendTo0;
  uses interface AMSend as AMSendTo2;
  uses interface Timer<TMilli> as Timer0;
  uses interface CorrectTime;
  uses interface PacketTimeStamp<TMilli, uint32_t> as PacketTimeStampMilli;
  uses interface Receive as ReceiveFrom0;
  uses interface Receive as ReceiveFrom2;
  uses interface LocalTime<TMilli> as LocalTime;
}
implementation {
//uint16_t Tpsn1SeqNr; // 2 Bytes. It contains the sequence number of
 uint32_t Tpsn1_time_aux;
 uint32_t Delta_timeStamp1;
 bool Waiting_anserws;
 uint32_t  tpsn1_orginal_time;
 uint32_t Tpsn1_RadioTimeStamp;
 uint32_t Tpsn2RadTStamp;
 uint16_t Tpsn2SeqNr;
 
// of the last received beacon
  //variables reserved in memory
  uint16_t counter;  // 2 Bytes. It contains the sequence number of 
  // released packets.
  message_t pktBuff; // many Bytes, packet buffer. This is not a pointer,
  // this is the allocation(space) a packet needs in memory. Functions related  
  // to packets access them via memory pointers / addresses, e.g.: &pktBuff
        enum {
  L0_ADD_Node = 0x000B,
  L2_ADD_Node = 0x0009
};

  event void Boot.booted() {
    counter = 0; //initialize counter
    call AMControl.start(); //start the radio module (ActiveMessageC)
    call Leds.led0On(); //turn on the red LED.
  }

  //radio
  event void AMControl.startDone(error_t err) {
    if(err == SUCCESS) {
      //if radio started normally, start a timer that will fire every 5 secs
      call Timer0.startPeriodic(TIMER_PERIOD_MILLI_TPSN1);
    }
    else {
      //in case radio did not start normally, try again
      call AMControl.start();
    }
  }

  //radio 
  event void AMControl.stopDone(error_t err) {
    //radio was stopped. Do nothing. 
  }

  //timer reached its time limit (every 5 secs.)
  event void Timer0.fired() {
    //Declare first pointers and variables used in this function.
    Tpsn1Msg_t * Tpsn1Msg; // Pointer to a beacon message in memory
                        // This is not an actual place/buffer in memory. 
 
    //Prepare and send packet.
    //First. Cast our packet (message_t) into a "beacon message" type
    //       Refer to the packet by using the "bMsg" pointer.
    Tpsn1Msg = (Tpsn1Msg_t * )(call Packet.getPayload(&pktBuff, sizeof(Tpsn1Msg_t)));
 
    //Check that the casting was ok. 
    if (Tpsn1Msg == NULL){
      // Casting failed for any reason, the pointer bMsg is NULL. 
      // Do nothing and leave this function.
      return;
    } 
    
    //Otherwise, the pointer bMsg is valid! Prepare packet!
    counter++; //increase counter
    
    Tpsn1Msg->nodeId = TOS_NODE_ID; //This is the ID of this node! 
    //This value is provided at install(flashing) time by the user.

    Tpsn1Msg->seqNr = counter; // Set the sequence number of this packet.
 
    // Send the packet. 
    // AMSend uses the memory address of the original packetBuffer, but
    // the size of the newly created BeaconMsg.  The destination address
    // is AM_BROADCAST_ADDR, which is defined as 0xFFFF and it means that 
    // any node around will accept the packet (broadcast).
    call AMSendTo0.send(L0_ADD_Node, &pktBuff, sizeof(Tpsn1Msg_t)); 
   
  }

  event void AMSendTo0.sendDone(message_t * msg, error_t err) {
  	
  	
    // This function comes with two arguments: a message pointer to the sent 
    // message and an error indicator informing whether the packet was sent
    // fine or had problems. We ignore the error information. 
    
    // Check if the sendDone corresponds to the packet sent by this
    // application (BeaconC). Check that the pointer msg points to pktBuff   
    if(&pktBuff == msg) {
    	if(call PacketTimeStampMilli.isValid(msg)){
    	
    		tpsn1_orginal_time= call PacketTimeStampMilli.timestamp(msg);
    		Waiting_anserws= TRUE;
		    // Verificar que el mesaje salio  (estampa de tiempo valida ))y guardar tiempo mensaje salio del nodo    	
		    // Check passed! This sendDone belongs to the pktBuff we sent, so we 
		    // are sure the transmission has finished.
            //call Leds.led1Toggle(); // toggle the yellow LED
		      
     
		} else { 
		  	Waiting_anserws = FALSE;
		} 
    }
  }
  
event message_t * ReceiveFrom0.receive(message_t *msg, void *payload, uint8_t len){
    //Pointer declaration
    Tpsn0_ReportMsg_t * Tpsn1Msg; // Pointer to a beacon message
    //uint16_t ranTime; // a random value
 
    // Check if the packet length and the time stamp are valid 
    if (len == sizeof(Tpsn0_ReportMsg_t) && Waiting_anserws){
      //Check passed! Cast the payload pointer to Beacon message
      Tpsn1Msg = (Tpsn0_ReportMsg_t*)payload;
      if (Tpsn1Msg->Tpsn0SeqNr == counter){
	      // Get the sequence number of the beacon 
	      //Tpsn1SeqNr = Tpsn1Msg->Tpsn0SeqNr;
	      // Get the radio time stamp of the packet and make the correction 
	      
	      Tpsn1_time_aux= Tpsn1Msg->Tpsn0RadTStamp;
	      Delta_timeStamp1= Tpsn1_time_aux-tpsn1_orginal_time;
	      // due to a time synchronization protocol (if any exists).
	      
	      call CorrectTime.set(call LocalTime.get()+ Delta_timeStamp1); 
	      
	     // Tpsn1_RadioTimeStamp =call CorrectTime.adjust(call PacketTimeStampMilli.timestamp(msg));
	      call Leds.led1Toggle();
          
          }
          
      // Get the current time at this level (application) with the 
      // respective correction due to the time synchronization protocol.
      // Compare to the radio time stamp! 
     
      
      // Now, as other nodes will try to send at this exact moment, packets can 
      // collide and the BaseStation will not be able to detect them correctly.
      // To avoid this we wait a random time between 0 and 1 second using 
      // the TimerWait timer.   
     
    }
    // We now give back the received msg buffer. 
    return msg; 
  }  
  
  
  
   event message_t * ReceiveFrom2.receive(message_t *msg, void *payload, uint8_t len){
    //Pointer declaration
    Tpsn2Msg_t* Tpsn2Msg; // Pointer to a beacon message
    Tpsn1_ReportMsg_t* Tpsn2rMsg;
     // a random value
 
 
 
    // Check if the packet length and the time stamp are valid 
    if ((len == sizeof(Tpsn2Msg_t))&&(call PacketTimeStampMilli.isValid(msg))) {
      //Check passed! Cast the payload pointer to Beacon message
      Tpsn2Msg = (Tpsn2Msg_t*)payload;
     
      // Get the sequence number of the beacon 
      Tpsn2SeqNr = Tpsn2Msg->seqNr;
      // Get the radio time stamp of the packet and make the correction 
      // due to a time synchronization protocol (if any exists).
      Tpsn2RadTStamp = call CorrectTime.adjust(call PacketTimeStampMilli.timestamp(msg)); 
      
    
      // Get the current time at this level (application) with the 
      // respective correction due to the time synchronization protocol.
      // Compare to the radio time stamp! 
      //Tpsn0AppTimeStamp = call CorrectTime.get();  
      
      // Now, as other nodes will try to send at this exact moment, packets can 
      // collide and the BaseStation will not be able to detect them correctly.
      // To avoid this we wait a random time between 0 and 1 second using 
      // the TimerWait timer.   
       //value between 0 and 1024 "ms"
        //Set timer to wait this value


   //Declare first pointers and variables used in this function.
	
	
     // Pointer to a report message in memory
                        // This is not an actual place/buffer in memory. 

    //Prepare and send packet.
    //First. Cast our packet (message_t) into a "report message" type
    //       Refer to the packet by using the "rMsg" pointer.
    Tpsn2rMsg = (Tpsn1_ReportMsg_t * )(call Packet.getPayload(&pktBuff, sizeof(Tpsn1_ReportMsg_t)));
 
    //Check that the casting was ok. 
    if (Tpsn2rMsg == NULL){
      // Casting failed for any reason, the pointer rMsg is NULL. 
      // Do nothing and leave this function.
      return msg;
    }  
 
    //Otherwise, the pointer rMsg is valid! Prepare packet!
 
    Tpsn2rMsg->nodeId  = TOS_NODE_ID;     // This ID of this node (installed value) 
    Tpsn2rMsg->Tpsn2SeqNr  = Tpsn2SeqNr;     // Set last beacon's sequence number

    // Set the radio and application time stamps for the last beacon 
    // The idea is to compare these two values (which should be close)
    Tpsn2rMsg->Tpsn2RadTStamp = Tpsn2RadTStamp; 
    //Tpsn0rMsg->bAppTStamp = Tpsn0AppTimeStamp; 
 
    // Send the packet. 
    // AMSend uses the memory address of the original packetBuffer, but
    // the size of the newly created ReportMsg.  The destination address
    // is AM_BROADCAST_ADDR, which is defined as 0xFFFF and it means that 
    // any node around will accept the packet (broadcast).
   
    call AMSendTo2.send(L2_ADD_Node, &pktBuff, sizeof(Tpsn1_ReportMsg_t));
   
    }
    // We now give back the received "msg" buffer. 
    return msg; 
  }


  //timer to send the report 
 
 
  event void AMSendTo2.sendDone(message_t * msg, error_t err) {
    // We ignore the "err" value.
    // Check if the sendDone corresponds to the sent packet by this
    // application. Check that the pointer msg points to pktBuff   
    if(&pktBuff == msg) {
      // Check passed! This sendDone belongs to the pktBuff we sent, so we 
      // are sure the transmission has finished.
      call Leds.led1Toggle(); // toggle the green LED
    }
  }
  
  

	

	
}